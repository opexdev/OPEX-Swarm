x-postgres-db: &postgres-db
  image: registry.opex.dev/repository/dockernilin-repo/postgres-opex:$TAG
  environment:
    - POSTGRES_USER=${DB_USER:-opex}
    - POSTGRES_PASSWORD=${DB_PASS:-hiopex}
    - POSTGRES_DB=${DB_USER:-opex}
    - POSTGRES_READ_ONLY_USER=${DB_READ_ONLY_USER:-opex_reader}
    - POSTGRES_READ_ONLY_PASSWORD=${DB_READ_ONLY_PASS:-hiopex}
  networks:
    - default
  deploy:
    restart_policy:
      condition: on-failure

version: '3.8'
services:
  postgres-scanner-scheduler:
    <<: *postgres-db
    volumes:
      - scanner-scheduler-data:/var/lib/postgresql/data/
  postgres-liaison:
    <<: *postgres-db
    volumes:
      - liaison-data:/var/lib/postgresql/data/
  postgres-scanner:
    <<: *postgres-db
    volumes:
      - scanner-data:/var/lib/postgresql/data/
  scanner-scheduler:
    image: registry.opex.dev/repository/dockernilin-repo/scanner-scheduler:$TAG
    environment:
      - JAVA_OPTS=-Xmx768m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      - DB_IP_PORT=postgres-scanner-scheduler
      - PREFERENCES=$PREFERENCES
      - BACKEND_USER=${BACKEND_USER}
      - VAULT_HOST=vault
    configs:
      - preferences.yml
    depends_on:
      - vault
      - postgres-scanner-scheduler
    labels:
      collect_logs: "true"
    networks:
      - default
  scanner-liaison:
    image: registry.opex.dev/repository/dockernilin-repo/scanner-liaison:$TAG
    environment:
      - JAVA_OPTS=-Xmx768m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      - DB_IP_PORT=postgres-liaison
      - PREFERENCES=$PREFERENCES
      - BACKEND_USER=${BACKEND_USER}
      - VAULT_HOST=vault
    configs:
      - preferences.yml
    depends_on:
      - vault
      - postgres-liaison
    networks:
      - default
  ethereum-scanner:
    image: registry.opex.dev/repository/dockernilin-repo/ethereum-scanner:$TAG
    environment:
      - JAVA_OPTS=-Xmx768m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      - DB_IP_PORT=postgres-scanner
      - RPC_ENDPOINT=${ETH_RPC_ENDPOINT}
      - PREFERENCES=$PREFERENCES
      - BACKEND_USER=${BACKEND_USER}
      - VAULT_HOST=vault
    configs:
      - preferences.yml
    depends_on:
      - vault
      - postgres-scanner
    labels:
      collect_logs: "true"
    networks:
      - default
  bitcoin-scanner:
    image: registry.opex.dev/repository/dockernilin-repo/bitcoin-scanner:$TAG
    environment:
      - JAVA_OPTS=-Xmx768m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      - DB_IP_PORT=postgres-scanner
      - REST_ENDPOINT=${BITCOIN_REST_ENDPOINT}
      - API_KEY=${BITCOIN_API_KEY}
      - PREFERENCES=$PREFERENCES
      - BACKEND_USER=${BACKEND_USER}
      - VAULT_HOST=vault
    configs:
      - preferences.yml
    depends_on:
      - vault
      - postgres-scanner
    labels:
      collect_logs: "true"
    networks:
      - default
  bsc-scanner:
    image: registry.opex.dev/repository/dockernilin-repo/ethereum-scanner:$TAG
    environment:
      - JAVA_OPTS=-Xmx768m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      - DB_IP_PORT=postgres-scanner
      - RPC_ENDPOINT=${BSC_RPC_ENDPOINT}
      - PREFERENCES=$PREFERENCES
      - BACKEND_USER=${BACKEND_USER}
      - VAULT_HOST=vault
    configs:
      - preferences.yml
    depends_on:
      - vault
      - postgres-scanner
    labels:
      collect_logs: "true"
    networks:
      - default
  tron-scanner:
    image: registry.opex.dev/repository/dockernilin-repo/tron-scanner:$TAG
    environment:
      - JAVA_OPTS=-Xmx768m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      - DB_IP_PORT=postgres-scanner
      - REST_ENDPOINT=${TRON_REST_ENDPOINT}
      - API_KEY=${TRON_API_KEY}
      - PREFERENCES=$PREFERENCES
      - BACKEND_USER=${BACKEND_USER}
      - VAULT_HOST=vault
    configs:
      - preferences.yml
    depends_on:
      - vault
      - postgres-scanner
    labels:
      collect_logs: "true"
    networks:
      - default
volumes:
  scanner-scheduler-data:
  liaison-data:
  scanner-data:
